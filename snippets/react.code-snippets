{
  "React useCheckMobile": {
    "prefix": "e-useCheckMobile",
    "body": [
      "import { useEffect, useState } from \"react\";",
      "",
      "export default function useCheckMobile() {",
      "  const [width, setWidth] = useState(0);",
      "  const handleWindowSizeChange = () => {",
      "    if (typeof window !== \"undefined\") {",
      "      setWidth(window.innerWidth);",
      "    }",
      "  };",
      "",
      "  useEffect(() => {",
      "    handleWindowSizeChange();",
      "  }, []);",
      "",
      "  return width <= 768;",
      "}",
      ""
    ],
    "description": "React useCheckMobile"
  },
  "React useMounted": {
    "prefix": "e-useMounted",
    "body": [
      "import { useEffect, useRef } from \"react\";",
      "",
      "export default function useMounted() {",
      "  const mountedRef = useRef(true);",
      "  useEffect(() => {",
      "    mountedRef.current = true;",
      "    return () => {",
      "      mountedRef.current = false;",
      "    };",
      "  }, []);",
      "  return mountedRef;",
      "}",
      ""
    ],
    "description": "React useMounted"
  },
  "React useLocalStorage": {
    "prefix": "e-useLocalStorage",
    "body": [
      "import { useState } from \"react\";",
      "",
      "export default function useLocalStorage<T>(key: string, initialValue: T) {",
      "  const [storedValue, setStoredValue] = useState<T>(() => {",
      "    if (typeof window === \"undefined\") {",
      "      return initialValue;",
      "    }",
      "    try {",
      "      const item = window.localStorage.getItem(key);",
      "      return item ? JSON.parse(item) : initialValue;",
      "    } catch (error) {",
      "      console.log(error);",
      "      return initialValue;",
      "    }",
      "  });",
      "  const setValue = (value: T | ((val: T) => T)) => {",
      "    try {",
      "      const valueToStore =",
      "        value instanceof Function ? value(storedValue) : value;",
      "      setStoredValue(valueToStore);",
      "      if (typeof window !== \"undefined\") {",
      "        window.localStorage.setItem(key, JSON.stringify(valueToStore));",
      "      }",
      "    } catch (error) {",
      "      console.log(error);",
      "    }",
      "  };",
      "  return [storedValue, setValue] as const;",
      "}",
      ""
    ],
    "description": "React useLocalStorage"
  },
  "React useClickOutSide": {
    "prefix": "e-useClickOutSide",
    "body": [
      "import { useEffect, useRef } from \"react\";",
      "",
      "export default function useClickOutSide(callback?: () => void) {",
      "  const nodeRef = useRef<HTMLDivElement>(null);",
      "  useEffect(() => {",
      "    function handleClickOutSide(this: Document, ev: MouseEvent) {",
      "      if (nodeRef.current && !nodeRef.current.contains(ev.target as Node)) {",
      "        callback?.();",
      "      }",
      "    }",
      "    document.addEventListener(\"click\", handleClickOutSide);",
      "    return () => {",
      "      document.removeEventListener(\"click\", handleClickOutSide);",
      "    };",
      "    // eslint-disable-next-line react-hooks/exhaustive-deps",
      "  }, []);",
      "  return {",
      "    nodeRef,",
      "  };",
      "}",
      ""
    ],
    "description": "React useClickOutSide"
  },
  "React useDebounce": {
    "prefix": "e-useDebounce",
    "body": [
      "import { useEffect, useState } from \"react\";",
      "",
      "export default function useDebounce(value: any, duration: number = 500) {",
      "  const [debounceValue, setDebounceValue] = useState(value);",
      "  useEffect(() => {",
      "    const timer = setTimeout(() => {",
      "      setDebounceValue(value);",
      "    }, duration);",
      "    return () => {",
      "      clearTimeout(timer);",
      "    };",
      "  }, [value]);",
      "  return debounceValue;",
      "}",
      ""
    ],
    "description": "React useDebounce"
  },
  "React useToggle": {
    "prefix": "e-useToggle",
    "body": [
      "import { useState } from \"react\";",
      "",
      "export default function useToggle(initialState: boolean = false) {",
      "  const [state, setState] = useState(initialState);",
      "  const toggle = () => {",
      "    setState((state) => !state);",
      "  };",
      "  return {",
      "    state,",
      "    toggle,",
      "  };",
      "}",
      ""
    ],
    "description": "React useToggle"
  },
  "React conditional wrapper": {
    "prefix": "e-conditional-wrapper",
    "body": [
      "const ConditionalWrapper = ({ condition, wrapper, children }) =>",
      "  condition ? wrapper(children) : children;",
      ""
    ],
    "description": "React conditional wrapper"
  }
}
